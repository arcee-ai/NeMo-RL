# GRPO Training with Proximal Docker Environment
# This configuration demonstrates training with isolated Docker sandboxes
# for code execution and testing tasks.

# GRPO Algorithm Configuration
grpo:
  num_prompts_per_step: 2
  num_generations_per_prompt: 2
  max_rollout_turns: 1  # Single-turn for code generation tasks
  max_num_steps: 5  # Just a few steps for smoke test
  normalize_rewards: true
  use_leave_one_out_baseline: true
  val_period: 50
  val_at_start: false
  max_val_samples: 100
  val_batch_size: 8
  seed: 42

loss_fn:
  reference_policy_kl_penalty: 0.01
  ratio_clip_min: 0.2
  ratio_clip_max: 0.2
  ratio_clip_c: null
  use_on_policy_kl_approximation: false
  use_importance_sampling_correction: false
  token_level_loss: true

checkpointing:
  enabled: true
  checkpoint_dir: "results/grpo_proximal_docker_4B"
  metric_name: "val_reward"
  higher_is_better: true
  keep_top_k: 4
  save_period: 10
  checkpoint_must_save_by: null

policy:
  model_name: "Qwen/Qwen3-4B-Instruct-2507"
  tokenizer:
    name: ${policy.model_name}
  train_global_batch_size: 4
  train_micro_batch_size: 2
  generation_batch_size: 4
  logprob_batch_size: 4
  max_total_sequence_length: 2048  # Increased for code tasks
  precision: "bfloat16"

  dtensor_cfg:
    enabled: false

  dtensor_v2_cfg:
    enabled: true
    cpu_offload: False
    sequence_parallel: false
    activation_checkpointing: false
    tensor_parallel_size: 1
    context_parallel_size: 1
    custom_parallel_plan: null
  
  megatron_cfg:
    enabled: false

  dynamic_batching:
    enabled: False
    train_mb_tokens: ${mul:${policy.max_total_sequence_length}, ${policy.train_micro_batch_size}}
    logprob_mb_tokens: ${mul:${policy.max_total_sequence_length}, ${policy.logprob_batch_size}}
    sequence_length_round: 64

  sequence_packing:
    enabled: True
    train_mb_tokens: ${mul:${policy.max_total_sequence_length}, ${policy.train_micro_batch_size}}
    logprob_mb_tokens: ${mul:${policy.max_total_sequence_length}, ${policy.logprob_batch_size}}
    algorithm: "modified_first_fit_decreasing"
    sequence_length_round: 64

  make_sequence_length_divisible_by: ${policy.dtensor_v2_cfg.tensor_parallel_size}
  max_grad_norm: 1.0

  optimizer:
    name: "torch.optim.AdamW"
    kwargs:
      lr: 3.0e-6
      weight_decay: 0.01
      betas: [0.9, 0.999]
      eps: 1e-8
      foreach: False
      fused: False

  scheduler:
    - name: "torch.optim.lr_scheduler.LinearLR"
      kwargs:
        start_factor: 0.1
        end_factor: 1.0
        total_iters: 50
    - name: "torch.optim.lr_scheduler.ConstantLR"
      kwargs:
        factor: 1.0
        total_iters: 10000000000
    - milestones: [50]

  generation:
    backend: "vllm_http"
    max_new_tokens: 1024  # Increased for code generation
    temperature: 0.7
    top_p: 0.8
    top_k: 20
    min_p: 0.0
    stop_token_ids: null
    stop_strings: null
    vllm_cfg:
      tool_parser: null
      async_engine: false
      precision: ${policy.precision}
      tensor_parallel_size: 1
      pipeline_parallel_size: 1
      gpu_memory_utilization: 0.6
      max_model_len: ${policy.max_total_sequence_length}
      enforce_eager: False
    colocated:
      enabled: false
      resources:
        gpus_per_node: 2
        num_nodes: null

data:
  max_input_seq_length: ${policy.max_total_sequence_length}
  shuffle: false

env:
  vf:
    environment_name: "vf_proximal_docker"
    environment_config:
      # Backend priority - try Beam first, fallback to Docker if it fails
      backend_priority: ["beam", "docker"]
      
      # Beam-specific configuration
      beam_config:
        # Template can be either:
        # 1. A Docker registry image (recommended for simplicity)
        template: "navidpour/bullmq-python-setup:latest"
        # 2. A Beam template ID (if you created one via dashboard)
        # template: "bullmq-opencode"
        
        # Command to start OpenCode server inside the sandbox
        # The container has opencode-ai installed globally
        start_command: "opencode serve --hostname 0.0.0.0 --port 4096"
        
        # Health check path to verify OpenCode is ready
        readiness_path: "/doc"
        
        # Timeout for readiness check (seconds)
        readiness_timeout: 180.0
        
        # Port where OpenCode server listens
        container_port: 4096
        
        # Working directory for commands
        working_dir: "/root/workspace"
        
        # Optional: Environment variables to set
        environment:
          PYTHONUNBUFFERED: "1"
          TQDM_DISABLE: "1"
        
        # Optional: Skip TLS verification (for debugging only)
        skip_tls_verify: false
      
      # Docker fallback configuration (if Beam fails)
      docker_config:
        image: "navidpour/bullmq-python-setup:latest"
        warm_pool_size: 2  # Small pool for fallback testing
        max_total_size: 4
        readiness_timeout: 180.0
        container_port: 4096
      
      # Task execution commands (same as before)
      setup_command: "taskrunner setup"
      prompt_command: "taskrunner prompt"
      test_command: "taskrunner test --xml"
      
      # Test results configuration
      junit_path: "/root/workspace/.trace/junit.xml"
      working_dir: "/root/workspace"
      shell: "bash"
      command_timeout: 300.0
      
      max_turns: 1
    
    # Concurrency control
    # Start small for smoke testing
    generation_semaphore: 2

logger:
  log_dir: "logs"
  num_val_samples_to_print: 0
  wandb_enabled: true
  tensorboard_enabled: false
  mlflow_enabled: false
  monitor_gpus: true
  wandb:
    project: "nemo-grpo-beam-smoke-test"
    name: "beam-smoke-test-run"
  tensorboard: {}
  mlflow:
    experiment_name: "grpo-proximal-docker-4B"
    run_name: "grpo-proximal-dev"
  gpu_monitoring:
    collection_interval: 10
    flush_interval: 10

cluster:
  gpus_per_node: 8
  num_nodes: 1
