# SFT Algorithm Configuration
sft:
  ## total number of steps to train will equal
  ## min((max_num_epochs * len(train_dataloader)), max_num_steps)
  max_num_epochs: 1
  max_num_steps: 9999999

  val_period: 20
  val_batches: 8
  val_global_batch_size: 8
  val_micro_batch_size: 1
  val_at_start: false
  seed: 42

checkpointing:
  enabled: true
  checkpoint_dir: "results/sft"
  metric_name: "val_loss" ## set to null to save most recent k checkpoints
  higher_is_better: false
  keep_top_k: 3
  save_period: 10
  checkpoint_must_save_by: null
  hf_checkpoint: true

policy:
  model_name: "Qwen/Qwen3-4B-Base"
  tokenizer:
    name: ${policy.model_name} ## specify if you'd like to use a tokenizer different from the model's default
  train_global_batch_size: 256
  train_micro_batch_size: 16
  max_total_sequence_length: 1024
  precision: "bfloat16"

  dtensor_cfg:
    enabled: false

  dtensor_v2_cfg:
    enabled: true
    use_liger: false
    cpu_offload: false
    sequence_parallel: false
    activation_checkpointing: true
    tensor_parallel_size: 1
    context_parallel_size: 1
    custom_parallel_plan: null

  dynamic_batching:
    enabled: true
    train_mb_tokens: ${mul:${policy.max_total_sequence_length}, ${policy.train_micro_batch_size}}
    algorithm: "modified_first_fit_decreasing"
    sequence_length_round: 64

  sequence_packing:
    enabled: false
    train_mb_tokens: ${mul:${policy.max_total_sequence_length}, ${policy.train_micro_batch_size}}
    algorithm: "modified_first_fit_decreasing"
    sequence_length_round: 64

  # makes the training sequence length divisible by the tensor parallel size
  # this is useful for sequence parallel training
  make_sequence_length_divisible_by: ${policy.dtensor_v2_cfg.tensor_parallel_size}
  max_grad_norm: 1.0

  optimizer:
    name: "torchao.optim.AdamW8bit"
    kwargs:
      lr: 5.0e-5
      weight_decay: 0.1
      betas: [0.9, 0.98]
      eps: 1e-5
    
data:
  dataset_name: "arcee-train/AFM-SFT-v0.1.7-32k-Qwen3-RLKit"
  dataset_type: "native"
  on_disk: false
  shuffle: false

logger:
  log_dir: "logs"  # Base directory for all logs
  wandb_enabled: true # Make sure you do a ``wandb login [Your API key]'' before running
  tensorboard_enabled: false
  mlflow_enabled: false
  monitor_gpus: true  # If true, will monitor GPU usage and log to wandb and/or tensorboard
  num_val_samples_to_print: 0  # Number of validation samples to pretty print on terminal
  wandb:
    project: "rlkit-sft-dev"
    name: "sft-dev-${data.dataset_name}"
  tensorboard:
    log_dir: "tb_logs-sft-dev-${data.dataset_name}"
  mlflow:
    experiment_name: "rlkit-sft-dev"
    run_name: "sft-dev-${data.dataset_name}"
  gpu_monitoring:
    collection_interval: 10  # How often to collect GPU usage metrics (in seconds)
    flush_interval: 10  # How often to flush GPU usage metrics to the loggers (in seconds)

cluster:
  gpus_per_node: 2
  num_nodes: 1
